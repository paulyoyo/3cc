import React, { useEffect, useRef } from "react";
import gsap from "gsap";
import { ScrollTrigger } from "gsap/dist/ScrollTrigger";
import Heading from "@ui/Heading";
import "./Process.scss";

export default function Process() {
  const contentRef = useRef(null);
  const linesRef = useRef([]);

  const steps = [
    {
      id: 1,
      title: "Envía la factura",
      description:
        "Una vez aprobada la operación, recibes un anticipo (un porcentaje del total) en días o incluso el mismo día; la factoring asume la cobranza hasta el vencimiento.",
    },
    {
      id: 2,
      title: "Evaluación",
      description:
        "Realizamos un análisis crediticio integral del deudor: historial de pagos, solvencia, plazo y condiciones del documento. Con base en este estudio, definimos el porcentaje de anticipo que te corresponde, las comisiones aplicables y los plazos.",
    },
    {
      id: 3,
      title: "Recibe tu dinero",
      description:
        "Tras aprobarse la operación, te entregamos un anticipo del monto convenido en un corto plazo, usualmente en días hábiles. Mientras tanto, gestionamos la cobranza del documento hasta su vencimiento, para que tú puedas concentrarte en tu negocio.",
    },
  ];

  useEffect(() => {
    gsap.registerPlugin(ScrollTrigger);

    const ele = contentRef.current;

    if (typeof window !== "undefined" && window.innerWidth >= 768 && ele) {
      const processSteps = gsap.utils.toArray(".process-step");
      const lines = gsap.utils.toArray(".process-line");

      // Set initial state - only steps and lines hidden (heading stays visible)
      gsap.set(processSteps, { opacity: 0, x: 200 });
      gsap.set(lines, { scaleX: 0, transformOrigin: "left" });

      // Create timeline for the animation with scroll-blocking
      const tl = gsap.timeline({
        scrollTrigger: {
          trigger: ele,
          pin: true, // Pins section in place during animation
          start: "top center", // Start when section center hits viewport center
          scrub: 1, // Ties animation progress to scroll (creates blocking effect)
          end: () => "+=" + window.innerHeight * 2.5,
          invalidateOnRefresh: true,
          markers: false,
          pinSpacing: true, // Adds space so content below doesn't jump
        },
      });

      // Animate each step from right to original position
      processSteps.forEach((step, index) => {
        tl.to(
          step,
          {
            opacity: 1,
            x: 0,
            duration: 1,
            ease: "power2.out",
          },
          index * 0.5, // Stagger: each step starts 0.5s after previous
        );

        // Animate corresponding line
        if (lines[index]) {
          tl.to(
            lines[index],
            {
              scaleX: 1,
              duration: 0.5,
              ease: "power2.out",
            },
            index * 0.5 + 0.3, // Lines appear slightly after their step
          );
        }
      });

      return () => {
        tl.kill();
      };
    }
  }, []);

  return (
    <section className="process-section bg-white pt-0">
      <div className="container mx-auto px-4 max-w-6xl">
        <div ref={contentRef} className="grid grid-cols-1 lg:grid-cols-12">
          <div className="lg:col-span-12">
            {/* Mobile: Vertical lines with steps */}
            <div className="flex flex-col md:hidden">
              <div className="lg:col-span-3 mb-8 lg:mb-0">
                <Heading
                  title="Proceso"
                  subtitle="Tres pasos sencillos para recibir tu dinero"
                />
              </div>

              {steps.map((step) => (
                <div key={step.id} className="flex">
                  <div
                    style={{
                      width: "5px",
                      minHeight: "60px",
                      backgroundColor: "#FB9B0D",
                    }}
                  />
                  <div className="flex-1">
                    <h3 className="text-xl font-normal text-gray-900 mb-3">
                      {step.title}
                    </h3>
                    <p className="text-base text-gray-600 leading-relaxed">
                      {step.description}
                    </p>
                  </div>
                </div>
              ))}
            </div>

            {/* Desktop: Horizontal lines */}
            <div className="hidden md:grid grid-cols-4 mb-4">
              {/* Empty space for heading column */}
              <div></div>
              {/* Lines for the 3 steps */}
              {steps.map((step, index) => (
                <div
                  key={step.id}
                  ref={(el) => (linesRef.current[index] = el)}
                  className="process-line"
                  style={{
                    height: "5px",
                    backgroundColor: "#FB9B0D",
                  }}
                />
              ))}
            </div>

            {/* Desktop: Grid layout with GSAP animation - Heading + Steps inline */}
            <div className="hidden md:grid grid-cols-4 gap-4 lg:gap-8">
              {/* Heading as first column */}
              <div className="process-heading">
                <Heading
                  title="Proceso"
                  subtitle="Tres pasos sencillos para recibir tu dinero"
                />
              </div>

              {/* Steps */}
              {steps.map((step) => (
                <div key={step.id} className="process-step">
                  <h3 className="text-xl md:text-2xl text-gray-900 mb-3">
                    {step.title}
                  </h3>
                  <p className="text-base md:text-lg text-gray-600 leading-relaxed">
                    {step.description}
                  </p>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>
    </section>
  );
}
